from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship

# Configuração do banco de dados e criação de uma sessão
engine = create_engine('sqlite:///biblioteca.db') # cria a engine
Session = sessionmaker(bind=engine)
session = Session()

# Base para as classes de modelo
Base = declarative_base() # declara a base 

# Modelo para Aluno
class Aluno(Base): #classe aluno
    __tablename__ = 'alunos' 

    ra = Column(String, primary_key=True)  # RA do aluno, serve como identificador único
    nome = Column(String)                   # Nome do aluno
    idade = Column(Integer)                 # Idade do aluno
    turmas = relationship('Turma', secondary='aluno_turma')  # Relacionamento de muitos-para-muitos com turmas

    def __repr__(self):
        return f'Aluno(ra={self.ra}, nome={self.nome}, idade={self.idade})'

# Modelo para Turma
class Turma(Base):
    __tablename__ = 'turmas'

    rt = Column(String, primary_key=True)  # RT da turma, serve como identificador único
    ano = Column(String)                    # Ano da turma (exemplo: '7')
    classe = Column(String)                 # Classe da turma (exemplo: 'A')
    alunos = relationship('Aluno', secondary='aluno_turma')  # Relacionamento com alunos
    professores = relationship('Professor', secondary='professor_turma')  # Relacionamento com professores

    def __repr__(self):
        return f'Turma(rt={self.rt}, ano={self.ano}, classe={self.classe})'

# Tabela de associação entre Aluno e Turma
class AlunoTurma(Base): #tabela de associação
    __tablename__ = 'aluno_turma' 
    aluno_ra = Column(String, ForeignKey('alunos.ra'), primary_key=True)  # Chave estrangeira para o RA do aluno
    turma_rt = Column(String, ForeignKey('turmas.rt'), primary_key=True)  # Chave estrangeira para o RT de turma

# Modelo para Professor
class Professor(Base): 
    __tablename__ = 'professores'

    rp = Column(Integer, primary_key=True)  # RP do professor, identificador único
    nome = Column(String)  # Nome do professor
    turmas = relationship('Turma', secondary='professor_turma')  # Relacionamento com turmas

    def __repr__(self):
        return f'Professor(nome={self.nome}, rp={self.rp})'

# Tabela de associação entre Professor e Turma
class ProfessorTurma(Base): #tabela de associação
    __tablename__ = 'professor_turma' 
    professor_rp = Column(Integer, ForeignKey('professores.rp'), primary_key=True)  # Chave estrangeira para o RP do professor
    turma_rt = Column(String, ForeignKey('turmas.rt'), primary_key=True)  # Chave estrangeira para o RT de turma

# Criação das tabelas no banco de dados
Base.metadata.create_all(engine)

# Função para adicionar um aluno ao banco de dados
def adicionar_aluno(nome, idade):
    ultimo_ra = session.query(Aluno).order_by(Aluno.ra.desc()).first()  # Obtém o último RA cadastrado
    novo_ra = str(int(ultimo_ra.ra) + 1) if ultimo_ra else "1"  # Incrementa o RA automaticamente
    if not session.query(Aluno).filter_by(ra=novo_ra).first():  # Verifica se o RA já existe
        novo_aluno = Aluno(ra=novo_ra, nome=nome, idade=idade)  # Cria um novo objeto Aluno
        session.add(novo_aluno)  # Adiciona o aluno à sessão
        session.commit()  # Salva as alterações no banco de dados
        print(f'Aluno {nome} (RA: {novo_ra}, idade: {idade}) adicionado com sucesso!')  # Exibe mensagem de sucesso
    else:
        print("Aluno com RA já existe!")  # Exibe mensagem de erro se o RA já existir

# Função para listar todos os alunos cadastrados
def consultar_alunos(): #função para listar alunos
    alunos = session.query(Aluno).all() #consulta todos os alunos
    for aluno in alunos: #percorre as turmas
        print(f'RA: {aluno.ra}, | Nome: {aluno.nome}, | Idade: {aluno.idade}') #imprime os alunos

# Função para adicionar uma turma ao banco de dados
def adicionar_turma(ano, classe):  #função para adicionar turma
    ultimo_rt = session.query(Turma).order_by(Turma.rt.desc()).first()  # Obtém o último RT cadastrado
    novo_rt = str(int(ultimo_rt.rt) + 1) if ultimo_rt else "1"  # Incrementa o RT automaticamente
    if not session.query(Turma).filter_by(rt=novo_rt).first():  # Verifica se o RT já existe
        nova_turma = Turma(rt=novo_rt, ano=ano, classe=classe)  # Cria um novo objeto Turma
        session.add(nova_turma) # Adiciona a turma à sessão
        session.commit() # Salva as alterações no banco de dados
        print(f'Turma {nova_turma} (ano: {ano}, classe: {classe}) adicionada com sucesso!')  # Exibe mensagem de sucesso
    else:
        print("Classe com RT já existente")  # Exibe mensagem de erro se o RT já existir

# Função para listar todas as turmas cadastradas
def consultar_turmas():  #função para listar turmas
    turmas = session.query(Turma).all()  #consulta todas as turmas
    for turma in turmas:  #percorre as turmas
        print(f'RT: {turma.rt}, Ano: {turma.ano}, Classe: {turma.classe}')  #imprime as turmas

# Função para associar um aluno a uma turma
def adicionar_aluno_a_turma(aluno_ra, turma_rt):  #função para adicionar aluno a turma
    aluno = session.query(Aluno).filter_by(ra=aluno_ra).first()  #consulta o aluno
    turma = session.query(Turma).filter_by(rt=turma_rt).first()  #consulta a turma
    if aluno and turma:  #verifica se o aluno e a turma existem
        if aluno in turma.alunos:  #verifica se o aluno já está na turma
            print(f'O aluno {aluno.nome} (RA: {aluno.ra}) já está na turma {turma.rt}.')  #imprime mensagem de erro
        else:
            turma.alunos.append(aluno)  #adiciona o aluno à turma
            session.commit() # Salva as alterações no banco de dados
            print(f'Aluno {aluno.nome} (RA: {aluno.ra}) adicionado à turma {turma.rt}.')  #imprime mensagem de sucesso
    elif not aluno:
        print("Aluno não encontrado.")  #imprime mensagem de erro
    elif not turma:
        print("Turma não encontrada.")  #imprime mensagem de erro
    else:
        print("Aluno ou Turma não encontrado(s).")  #imprime mensagem de erro

# Função para listar os alunos de uma turma específica
def consultar_alunos_por_turma(turma_rt):  #função para listar alunos de uma turma
    turma = session.query(Turma).filter_by(rt=turma_rt).first()  #consulta a turma
    if turma:  #verifica se a turma existe
        print(f'Alunos na turma {turma.rt} ({turma.ano} {turma.classe}):')  #imprime a turma
        for aluno in turma.alunos:  
            print(f' - {aluno.nome} | (RA: {aluno.ra})')  #imprime os alunos
    else:
        print("Turma não encontrada.")

# Função para adicionar um professor ao banco de dados
def adicionar_professor(nome):  #função para adicionar professor
    ultimo_rp = session.query(Professor).order_by(Professor.rp.desc()).first()  # Obtém o último RP cadastrado
    novo_rp = int(ultimo_rp.rp) + 1 if ultimo_rp else 1  # Incrementa o RP automaticamente
    if not session.query(Professor).filter_by(rp=novo_rp).first():  # Verifica se o RP já existe
        novo_professor = Professor(rp=novo_rp, nome=nome)  # Cria um novo objeto Professor
        session.add(novo_professor)  # Adiciona o professor à sessão
        session.commit() # Salva as alterações no banco de dados
        print(f'Professor {nome} (RP: {novo_rp}) adicionado com sucesso!')  # Exibe mensagem de sucesso
    else:
        print("Professor já existe no sistema.")  # Exibe mensagem de erro se o RP já existir

# Função para listar todos os professores cadastrados
def consultar_professores():  #função para listar professores
    professores = session.query(Professor).all() 
    if professores:  #verifica se há professores cadastrados
        for professor in professores:  #percorre os professores 
            print(f'Nome: {professor.nome}, RP: {professor.rp}')  #imprime os professores
    else:
        print("Ainda não há professores registrados no sistema.")  #imprime mensagem de erro

# Função para associar um professor a uma turma
def adicionar_professor_a_turma(professor_rp, turma_rt):  #função para adicionar professor a turma
    professor = session.query(Professor).filter_by(rp=professor_rp).first() 
    turma = session.query(Turma).filter_by(rt=turma_rt).first() 
    if professor and turma: 
        if professor in turma.professores: 
            print(f'O professor {professor.nome} (RP: {professor.rp}) já está na turma {turma.rt}.') 
        else:
            turma.professores.append(professor) 
            session.commit() # Salva as alterações no banco de dados
            print(f'Professor {professor.nome} (RP: {professor.rp}) adicionado à turma {turma.rt} (ano {ano}) (classe {classe}).') 
    else:
        print("Professor ou Turma não encontrado(s).") 

# Função para listar os professores de uma turma específica
def consultar_professor_por_turma(turma_rt):  #função para listar professores de uma turma
    turma = session.query(Turma).filter_by(rt=turma_rt).first() 
    if turma: 
        print(f'Professores da turma {turma.rt} ({turma.ano} {turma.classe}):') 
        for professor in turma.professores: 
            print(f' - {professor.nome} (RP: {professor.rp})') 
    else:
        print("Turma não encontrada.")

# Função para remover um aluno de todas as turmas e do sistema
def remover_aluno_de_turmas():  #função para remover aluno de turmas
    consultar_alunos()  # Lista todos os alunos
    aluno_ra = input('Digite o RA do Aluno que deseja expulsar: ') 
    aluno = session.query(Aluno).filter_by(ra=aluno_ra).first() 
    if aluno:
        for turma in aluno.turmas: 
            turma.alunos.remove(aluno) 
        session.delete(aluno) 
        session.commit() # Salva as alterações no banco de dados
        print(f'Aluno {aluno.nome} | (RA: {aluno.ra}) foi removido de todas as turmas e excluído do sistema.')
    else:
        print("Aluno não encontrado.")

def main():
    while True:
        print('\nEscolha uma opção:')
        print("-----------------------------")
        print('1. Adicionar Aluno')
        print('2. Adicionar Turma')
        print('3. Adicionar Professor')
        print("-----------------------------")
        print('4. Consultar Aluno')
        print('5. Consultar Turmas')
        print('6. Consultar Professor')
        print("-----------------------------")
        print('7. Adicionar aluno a turma')
        print('8. Adicionar professor a turma')
        print("-----------------------------")
        print('9. Consultar lista de alunos da turma')
        print('10. Consultar Professor por Turma')
        print('11. Explusar Aluno da Turma')
        print("-----------------------------")
        print('20. Sair')

        opcao = input('Opção: ')

        if opcao == '1' or opcao == 'Adicionar Aluno' or opcao == 'adicionar aluno' or opcao == 'Adicionar aluno':
            nome = input('Nome do Aluno: ') 
            idade = int(input('Idade do Aluno: '))
            adicionar_aluno(nome, idade)


        elif opcao == '2' or opcao == 'Adicionar Turma' or opcao == 'Adicionar turma' or opcao == 'adicionar turma':
            print("RT é o codigo indentificador da turma")
            ano = input('Ano da Turma: ')
            classe = input('Classe da Turma: ')
            adicionar_turma(ano, classe)

        elif opcao == '3' or opcao == 'Adicionar Professor' or opcao == 'Adicionar professor' or opcao == 'adicionar professor':
            print("RP é o codigo indentificador do Professor")
            nome = input('Nome do Professor: ')
            adicionar_professor(nome)



        elif opcao == '4' or opcao == 'Consultar Aluno' or opcao == 'Consultar aluno' or opcao == 'consultar aluno' :
            print("Lista de Alunos:")
            consultar_alunos()


        elif opcao == '5' or opcao == 'Consultar Turma' or opcao == 'Consultar turma' or opcao == 'consultar turma':
            print("Lista de Turmas:")
            consultar_turmas()

        elif opcao == '6' or opcao == 'Consultar Professor' or opcao == 'Consultar professor' or opcao == 'consultar professor':
            print("Lista de Professores:")
            consultar_professores()


        elif opcao == '7' or opcao == 'Adicionar Aluno a Turma' or opcao == 'Adicionar Aluno a turma' or opcao == 'Adicionar aluno a turma' or opcao == 'adicionar aluno a turma':
            aluno_ra = input('RA do Aluno: ')
            turma_rt = input('RT da Turma: ')
            adicionar_aluno_a_turma(aluno_ra, turma_rt)

        elif opcao == '8' or opcao == 'Adicionar Professor a Turma' or opcao == 'Adicionar Professor a turma' or opcao == 'Adicionar professor a turma' or opcao == 'adicionar professor a turma':
            professor_rp = int(input('RP do Professor: '))
            turma_rt = input('RT da Turma: ')
            adicionar_professor_a_turma(professor_rp, turma_rt)

        elif opcao == '9' or opcao == 'Consultar Lista de Alunos da Turma' or opcao == 'Consultar Lista de Alunos da turma' or opcao == 'Consultar Lista de alunos da turma' or opcao == 'consultar lista de alunos da turma':
            turma_rt = input('RT da Turma: ')
            consultar_alunos_por_turma(turma_rt)

        elif opcao == '10' or opcao == 'Consultar Professor por Turma' or opcao == 'Consultar Professor por turma' or opcao == 'Consultar professor por Turma' or opcao == 'consultar professor por turma':
            turma_rt = input('RT da Turma: ')
            consultar_professor_por_turma(turma_rt)

        elif opcao == '11':
            remover_aluno_de_turmas()

        elif opcao == '20' or opcao == 'Sair' or opcao == 'sair':
            break

        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()  # Executa a função principal ao iniciar o programa
