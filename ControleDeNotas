# Importa classes e funções da biblioteca SQLAlchemy, que é uma ferramenta para trabalhar com bancos de dados em Python
from sqlalchemy import Column, Integer, String, ForeignKey, Float, create_engine  # Importa tipos de dados, chave estrangeira e engine de conexão
from sqlalchemy.orm import relationship, sessionmaker  # relationship para relacionamentos e sessionmaker para sessões de banco de dados
from sqlalchemy.ext.declarative import declarative_base  # Base para definir modelos de tabelas
from sqlalchemy.exc import IntegrityError  # Exceção para erros de integridade (por exemplo, duplicidade)

# Define uma classe base para as tabelas do banco de dados
Base = declarative_base()

# Cria um objeto de conexão com o banco de dados SQLite em memória; substitua para um banco persistente em produção
engine = create_engine('sqlite:///:memory:')  

# Cria uma fábrica de sessões vinculada ao engine, permitindo a interação com o banco de dados
Session = sessionmaker(bind=engine)

# Instancia uma sessão do banco de dados
session = Session()

# Classe que define a tabela Aluno
class Aluno(Base):
    __tablename__ = 'alunos'  # Nome da tabela no banco de dados
    ra = Column(String, primary_key=True)  # RA do aluno como chave primária
    nome = Column(String)  # Nome do aluno
    notas = relationship("Nota", back_populates="aluno")  # Relacionamento com a tabela Nota

# Classe que define a tabela Disciplina
class Disciplina(Base):
    __tablename__ = "disciplinas"  # Nome da tabela no banco de dados
    id = Column(Integer, primary_key=True)  # ID da disciplina como chave primária
    nome = Column(String, unique=True)  # Nome da disciplina, que deve ser único
    notas = relationship("Nota", back_populates="disciplina")  # Relacionamento com a tabela Nota

# Classe que define a tabela Nota
class Nota(Base):
    __tablename__ = "notas"  # Nome da tabela no banco de dados
    id = Column(Integer, primary_key=True)  # ID da nota como chave primária
    aluno_id = Column(String, ForeignKey('alunos.ra'))  # Chave estrangeira para o RA do aluno
    disciplina_id = Column(Integer, ForeignKey('disciplinas.id'))  # Chave estrangeira para o ID da disciplina
    valor = Column(Float, nullable=False)  # Valor da nota, obrigatório (não permite nulo)
    aluno = relationship("Aluno", back_populates="notas")  # Relacionamento com a tabela Aluno
    disciplina = relationship("Disciplina", back_populates="notas")  # Relacionamento com a tabela Disciplina

# Cria todas as tabelas definidas no banco de dados
Base.metadata.create_all(engine)

# Função para adicionar um aluno ao banco de dados
def adicionar_aluno(ra, nome):
    try:
        novo_aluno = Aluno(ra=ra, nome=nome)  # Cria um novo objeto Aluno
        session.add(novo_aluno)  # Adiciona o objeto à sessão
        session.commit()  # Confirma a operação no banco de dados
        print(f"Aluno {nome} adicionado com sucesso!")
    except IntegrityError:
        session.rollback()  # Desfaz a operação caso ocorra um erro de duplicidade de RA
        print(f"Erro: RA {ra} já existe!")

# Função para adicionar uma disciplina ao banco de dados
def adicionar_disciplina(nome):
    try:
        nova_disciplina = Disciplina(nome=nome)  # Cria um novo objeto Disciplina
        session.add(nova_disciplina)  # Adiciona o objeto à sessão
        session.commit()  # Confirma a operação no banco de dados
        print(f"Disciplina {nome} adicionada com sucesso!")
    except IntegrityError:
        session.rollback()  # Desfaz a operação em caso de erro de duplicidade de nome de disciplina
        print(f"Erro: Disciplina {nome} já existe!")
    except ValueError:
        session.rollback()  # Desfaz a operação em caso de erro de valor
        print(f"Erro: Erro de valor, digite o nome de uma disciplina!")

# Função para adicionar uma nota a um aluno em uma disciplina
def adicionar_nota(aluno_ra, nome_disciplina, valor):
    try:
        # Busca a disciplina pelo nome
        disciplina = session.query(Disciplina).filter_by(nome=nome_disciplina).first()
        if not disciplina:  # Verifica se a disciplina foi encontrada
            print(f"Erro: Disciplina '{nome_disciplina}' não encontrada.")
            return

        # Busca o aluno pelo RA
        aluno = session.query(Aluno).filter_by(ra=aluno_ra).first()
        if not aluno:  # Verifica se o aluno foi encontrado
            print(f"Erro: Aluno com RA '{aluno_ra}' não encontrado.")
            return

        # Cria um novo objeto Nota
        nova_nota = Nota(aluno_id=aluno_ra, disciplina_id=disciplina.id, valor=valor)
        session.add(nova_nota)  # Adiciona o objeto Nota à sessão
        session.commit()  # Confirma a operação no banco de dados
        print(f"Nota {valor} adicionada para o aluno {aluno_ra} na disciplina {nome_disciplina}.")
    except ValueError:
        print("Erro: Por favor, insira um número válido para a nota.")
    except IntegrityError:
        session.rollback()  # Desfaz a operação caso ocorra erro de integridade
        print("Erro ao adicionar a nota. Verifique se o aluno e a disciplina existem.")

# Função para listar todos os alunos no banco de dados
def listar_alunos():
    alunos = session.query(Aluno).all()  # Consulta todos os registros da tabela Aluno
    for aluno in alunos:  # Itera sobre cada aluno encontrado
        print(f"RA: {aluno.ra}, Nome: {aluno.nome}")

# Função para listar todas as disciplinas no banco de dados
def listar_disciplinas():
    disciplinas = session.query(Disciplina).all()  # Consulta todos os registros da tabela Disciplina
    for disciplina in disciplinas:  # Itera sobre cada disciplina encontrada
        print(f"Disciplina: {disciplina.nome}, ID: {disciplina.id}")

# Função para listar todas as notas no banco de dados
def listar_notas():
    notas = session.query(Nota).all()  # Consulta todos os registros da tabela Nota
    for nota in notas:  # Itera sobre cada nota encontrada
        # Busca o aluno associado ao RA da nota
        aluno = session.query(Aluno).filter_by(ra=nota.aluno_id).first()
        # Busca a disciplina associada ao ID da nota
        disciplina = session.query(Disciplina).filter_by(id=nota.disciplina_id).first()
        print(f"Aluno: {aluno.nome}, RA: {aluno.ra}, Disciplina: {disciplina.nome}, Valor: {nota.valor}")

# Interface de usuário para o sistema de gerenciamento
def main():
    while True:  # Loop para manter a interface ativa até o usuário escolher sair
        print("\nGerenciamento de Alunos, Disciplinas e Notas.")
        print("1. Adicionar Aluno")
        print("2. Adicionar Disciplina")
        print("3. Adicionar Nota")
        print("4. Listar Alunos")
        print("5. Listar Disciplinas")
        print("6. Listar Notas")
        print("7. Sair")

        # Solicita ao usuário que escolha uma opção
        opcao = input("Escolha uma opção: ")
        
        if opcao == "1":  # Adiciona um aluno
            ra = input("Digite o RA do aluno: ")
            nome = input("Digite o nome do aluno: ")
            adicionar_aluno(ra, nome)
        
        elif opcao == "2":  # Adiciona uma disciplina
            # Conjunto de disciplinas válidas
            disciplinas_validas = {
                "Matematica", "Geografia", "Ciências", "Língua Portuguesa",
                "História", "Educação Física", "Artes"
            }

            # Solicita o nome da disciplina e capitaliza a entrada
            nome = input("Digite o nome da disciplina: ").capitalize()

            if nome in disciplinas_validas:  # Verifica se a disciplina é válida
                print("Matéria adicionada com sucesso!")
                adicionar_disciplina(nome)
            else:
                print("Matéria inválida!")

        elif opcao == "3":  # Adiciona uma nota
            aluno_ra = input("Digite o RA do aluno: ")
            nome_disciplina = input("Digite o nome da disciplina: ")
            valor = float(input("Digite a nota: "))  # Converte a entrada para float
            adicionar_nota(aluno_ra, nome_disciplina, valor)

        elif opcao == "4":  # Lista todos os alunos
            listar_alunos()

        elif opcao == "5":  # Lista todas as disciplinas
            listar_disciplinas()

        elif opcao == "6":  # Lista todas as notas
            listar_notas()

        elif opcao == "7":  # Encerra o sistema
            print("Saindo do sistema...")
            break

        else:
            print("Opção inválida)

if __name__ == "__main__":
        main()
