from sqlalchemy import Column, Integer, String, ForeignKey, Float
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Aluno(Base):
    __tablename__ = 'alunos'

    ra = Column(String, primary_key=True)    # RA do aluno, é o numero que permite adiconar o aluno a lista
    nome = Column(String)                     # Nome do aluno
    
    notas = relationship("Nota", back_populates="aluno")
    
        
 class Disciplina(Base):
     __tablename__ = "disciplinas"
     id = Column(Integer, primaryKey=True)
     nome = Column(String)
     notas = relationship("Nota", back_populates="disciplina")
     
        
class Nota(Base):
    __tablename__ = "notas"
    id = Column(Integer, primary_key=True)
    aluno_id = Column(Integer, ForeignKey('alunos.id'))
    disciplina_id = Column(Integer, ForeignKey('disciplinas.id'))
    valor = Column(Float, nullable=False)      
    
   aluno = relationship("Aluno", back_populates="notas")
   disciplina = relationship("Disciplina", back_populates="notas")
    
    
Base.metadata.create_all(engine)
    
# Funções CRUD
  def adicionar_aluno(ra, nome):
      try:
          novo_aluno = Aluno(ra=ra, nome=nome)
          session.add(novo_aluno)
          session.commit()
          print(f"Aluno {nome} adicionado com sucesso!")
      except IntegrityError:   #O tratamento da exceção IntegrityError é importante para garantir que o sistema lida corretamente com situações,
  # em que um registro não pode ser adicionado devido a restrições de integridade, como a duplicação de chaves primárias.
          session.rollback()
          print(f"Erro: RA {ra} já existe!")    
    
    
  def adicionar_disciplina(nome):
     try:
         nova_disciplina = Disciplina(nome=nome)
         session.add(nova_disciplina)
         session.commit()
         print(f"Disciplina {nome} adicionada com sucesso!")
     except IntegrityError:
         session.rollback()
         print(f"Erro: Disciplina {nome} já existe!")   
         
         
         
  def adicionar_nota(nome_disciplina,aluno_RA):
     try: 
         # Buscar a disciplina pelo nome e atribuir à variável
        disciplina = session.query(Disciplina).filter_by(nome=nome_disciplina).first()

# Agora, verifique se a disciplina foi encontrada
        if disciplina:
    # A disciplina foi encontrada, você pode prosseguir
           print(f"Disciplina '{nome_disciplina}' encontrada.")
        else:
    # A disciplina não foi encontrada
           print(f"Erro: Disciplina '{nome_disciplina}' não encontrada.")
             return  # Interrompe a função se a disciplina não existir
             
             
        aluno = session.query(Aluno).filter_by(ra=aluno_RA).first()     
        
        if aluno:
           print(f"Aluno com RA '{aluno_RA}' encontrado!") 
          
        else: 
           print(f"Erro: Aluno com RA '{aluno_RA}' não encontrado.")
           return  # Interrompe a função se o aluno não existir
        
            
  # Solicitar a nota ao usuário
        valor = float(input("Digite a nota do aluno: "))
        nova_nota = Nota(aluno_id=aluno_RA, disciplina_id=disciplina.id, valor=valor)
        session.add(nova_nota)
        session.commit()
        print(f"Nota {valor} adicionada para o aluno {aluno_RA} na disciplina {nome_disciplina}.")
        
     except ValueError:
       print("Erro: Por favor, insira um número válido para a nota.")
     except IntegrityError:
       session.rollback()
        print("Erro ao adicionar a nota. Verifique se o aluno e a disciplina existem.")
        
        
  # Função para listar alunos      
  def listar_alunos():
      alunos = session.query(Aluno).all()  # Consulta todos os alunos da tabela 'alunos'
       for aluno in alunos:                  # Itera sobre cada aluno retornado
           print(f"RA: {aluno.ra}, Nome: {aluno.nome}")  # Imprime o RA e o Nome do alunop
