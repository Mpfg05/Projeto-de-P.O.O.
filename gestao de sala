from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, declarative_base, relationship

# Configuração do banco de dados e criação de uma sessão
engine = create_engine('sqlite:///biblioteca.db')
Session = sessionmaker(bind=engine)
session = Session()

# Base para as classes de modelo
Base = declarative_base()

# Modelo para Aluno
class Aluno(Base):
    __tablename__ = 'alunos'

    ra = Column(String, primary_key=True)    # RA do aluno, serve como identificador único
    nome = Column(String)                     # Nome do aluno
    idade = Column(Integer)                   # Idade do aluno
    turmas = relationship('Turma', secondary='aluno_turma')  # Relacionamento de muitos-para-muitos com turmas

    def __repr__(self):
        return f'<Aluno(ra={self.ra}, nome={self.nome}, idade={self.idade})>'

# Modelo para Turma
class Turma(Base):
    __tablename__ = 'turmas'

    rt = Column(String, primary_key=True)    # RT da turma, serve como identificador único
    ano = Column(String)                      # Ano da turma (exemplo: '7')
    classe = Column(String)                   # Classe da turma (exemplo: 'A')
    alunos = relationship('Aluno', secondary='aluno_turma')  # Relacionamento com alunos
    professores = relationship('Professor', secondary='professor_turma')  # Relacionamento com professores

    def __repr__(self):
        return f'<Turma(rt={self.rt}, ano={self.ano}, classe={self.classe})>'

# Tabela de associação entre Aluno e Turma
class AlunoTurma(Base):
    __tablename__ = 'aluno_turma'
    aluno_ra = Column(String, ForeignKey('alunos.ra'), primary_key=True)
    turma_rt = Column(String, ForeignKey('turmas.rt'), primary_key=True)

# Modelo para Professor
class Professor(Base):
    __tablename__ = 'professores'

    rp = Column(Integer, primary_key=True)  # RP do professor, identificador único
    nome = Column(String)  # Nome do professor

    def __repr__(self):
        return f'<Professor(nome={self.nome}, rp={self.rp})>'

# Tabela de associação entre Professor e Turma
class ProfessorTurma(Base):
    __tablename__ = 'professor_turma'
    professor_rp = Column(Integer, ForeignKey('professores.rp'), primary_key=True)
    turma_rt = Column(String, ForeignKey('turmas.rt'), primary_key=True)

# Criação das tabelas no banco de dados
Base.metadata.create_all(engine)

# Função para adicionar um aluno ao banco de dados
def adicionar_aluno(ra, nome, idade):
    aluno_existente = session.query(Aluno).filter_by(ra=ra).first()
    if not aluno_existente:
        novo_aluno = Aluno(ra=ra, nome=nome, idade=idade)
        session.add(novo_aluno)
        session.commit()
        print(f'Aluno {nome} (RA: {ra}, idade: {idade}) adicionado com sucesso!')
    else:
        print("Aluno com RA já existe!")

# Função para listar todos os alunos cadastrados
def consultar_alunos():
    alunos = session.query(Aluno).all()
    for aluno in alunos:
        print(f'RA: {aluno.ra}, Nome: {aluno.nome}, Idade: {aluno.idade}')

# Função para adicionar uma turma ao banco de dados
def adicionar_turma(rt, ano, classe):
    turma_existente = session.query(Turma).filter_by(rt=rt).first()
    if not turma_existente:
        nova_turma = Turma(rt=rt, ano=ano, classe=classe)
        session.add(nova_turma)
        session.commit()
        print(f'Turma {rt} (ano: {ano}, classe: {classe}) adicionada com sucesso!')
    else:
        print("Turma com RT já existe!")

# Função para listar todas as turmas cadastradas
def consultar_turmas():
    turmas = session.query(Turma).all()
    for turma in turmas:
        print(f'RT: {turma.rt}, Ano: {turma.ano}, Classe: {turma.classe}')

# Função para associar um aluno a uma turma
def adicionar_aluno_a_turma(aluno_ra, turma_rt):
    aluno = session.query(Aluno).filter_by(ra=aluno_ra).first()
    turma = session.query(Turma).filter_by(rt=turma_rt).first()
    if aluno and turma:
        turma.alunos.append(aluno)
        session.commit()
        print(f'Aluno {aluno.nome} (RA: {aluno.ra}) adicionado à turma {turma.rt}.')
    else:
        print("Aluno ou Turma não encontrados.")

# Função para listar os alunos de uma turma específica
def consultar_alunos_por_turma(turma_rt):
    turma = session.query(Turma).filter_by(rt=turma_rt).first()
    if turma:
        print(f'Alunos na turma {turma.rt} ({turma.ano} {turma.classe}):')
        for aluno in turma.alunos:
            print(f' - {aluno.nome} (RA: {aluno.ra})')
    else:
        print("Turma não encontrada.")

# Função para adicionar um professor ao banco de dados
def adicionar_professor(rp, nome):
    professor_existente = session.query(Professor).filter_by(rp=rp).first()
    if not professor_existente:
        professor = Professor(rp=rp, nome=nome)
        session.add(professor)
        session.commit()
        print(f'Professor {nome} (RP: {rp}) adicionado com sucesso!')
    else:
        print("Professor já existe no sistema.")

# Função para listar todos os professores cadastrados
def consultar_professores():
    professores = session.query(Professor).all()
    if professores:
        for professor in professores:
            print(f'Nome: {professor.nome}, RP: {professor.rp}')
    else:
        print("Ainda não há professores registrados no sistema.")

# Função para associar um professor a uma turma
def adicionar_professor_a_turma(professor_rp, turma_rt):
    professor = session.query(Professor).filter_by(rp=professor_rp).first()
    turma = session.query(Turma).filter_by(rt=turma_rt).first()
    if professor and turma:
        turma.professores.append(professor)
        session.commit()
        print(f'Professor {professor.nome} (RP: {professor.rp}) adicionado à turma {turma.rt}.')
    else:
        print("Professor ou Turma não encontrados.")

# Função para listar os professores de uma turma específica
def consultar_professor_por_turma(turma_rt):
    turma = session.query(Turma).filter_by(rt=turma_rt).first()
    if turma:
        print(f'Professores da turma {turma.rt} ({turma.ano} {turma.classe}):')
        for professor in turma.professores:
            print(f' - {professor.nome} (RP: {professor.rp})')
    else:
        print("Turma não encontrada.")

# Função principal e menu de interação com o usuário
def main():
    while True:
        print('\nEscolha uma opção:')
        print("-----------------------------")
        print('1. Adicionar Aluno')
        print('2. Adicionar Turma')
        print('3. Adicionar Professor')
        print("-----------------------------")
        print('4. Consultar Aluno')
        print('5. Consultar Turmas')
        print('6. Consultar Professor')
        print("-----------------------------")
        print('7. Adicionar aluno a turma')
        print('8. Adicionar professor a turma')
        print("-----------------------------")
        print('9. Consultar lista de alunos da turma')
        print('10. Consultar Professore por Turma')
        print("-----------------------------")
        print('20. Sair')

        opcao = input('Opção: ')

        if opcao == '1':
            ra = input('RA do Aluno: ')
            nome = input('Nome do Aluno: ')
            idade = int(input('Idade do Aluno: '))
            adicionar_aluno(ra, nome, idade)


        elif opcao == '2':
            rt = input('RT da Turma: ')
            ano = input('Ano da Turma: ')
            classe = input('Classe da Turma: ')
            adicionar_turma(rt, ano, classe)

        elif opcao == '3':
            rp = int(input('RP do Professor: '))
            nome = input('Nome do Professor: ')
            adicionar_professor(rp, nome)



        elif opcao == '4':
            print("Lista de Alunos:")
            consultar_alunos()


        elif opcao == '5':
            print("Lista de Turmas:")
            consultar_turmas()

        elif opcao == '6':
            print("Lista de Professores:")
            consultar_professores()


        elif opcao == '7':
            aluno_ra = input('RA do Aluno: ')
            turma_rt = input('RT da Turma: ')
            adicionar_aluno_a_turma(aluno_ra, turma_rt)

        elif opcao == '8':
            professor_rp = int(input('RP do Professor: '))
            turma_rt = input('RT da Turma: ')
            adicionar_professor_a_turma(professor_rp, turma_rt)

        elif opcao == '9':
            turma_rt = input('RT da Turma: ')
            consultar_alunos_por_turma(turma_rt)

        elif opcao == '10':
            turma_rt = input('RT da Turma: ')
            consultar_professor_por_turma(turma_rt)

        elif opcao == '20':
            break

        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()  # Executa a função principal ao iniciar o programa
